package dynagent.ruleengine.src.ruler.ERPrules;
import dynagent.ruleengine.src.ruler.ERPrules.*;
import dynagent.ruleengine.src.ruler.ERPrules.datarules.*;
import dynagent.ruleengine.src.ruler.*;
import java.util.*;
import dynagent.common.properties.*;
import dynagent.common.properties.values.*;
import dynagent.common.knowledge.*;
import dynagent.ruleengine.meta.api.*;
import dynagent.common.utils.Auxiliar;
import dynagent.common.Constants;
import dynagent.common.exceptions.*;
import org.drools.WorkingMemory;
import dynagent.common.basicobjects.*;
global DataModelAdapter dma;

rule "CARDINALIDAD MINIMA 1 EN  PROPIEDADES ADICIONALES LINEA EN ENTRADA/SALIDA MERCANCIA/REGULARIZACIÓN"
salience 200
no-loop true
 agenda-group "rules" when 
	 FactHierarchy(idtoLinea:IDTO,CLASSSUP=="LÍNEA_MATERIA")
	 Individual(IDTO==idtoLinea,claseLinea:CLASSNAME,idoLinea:IDO, state:STATE)	 
	 Model(CLASSNAME==claseLinea,propLineaReq:PROPNAME=="lote"||=="talla"||=="color"||=="medida1"||=="medida2",OP==Constants.OP_INTERSECTION)
	 	 
	 ObjValue(IDO==idoLinea,PROPNAME=="producto",idoProducto:IDOVALUE!=null,idtoProducto:VALUECLS,clsProducto:RANGENAME)
	 DV:DatValue(IDO==idoProducto,namePropReq:PROPNAME=="requiere_lote"||=="requiere_talla"||=="requiere_color"||=="requiere_medida",BOOLEANVALOR==true,idPropReq:PROP)
	 	 
	 forall(
		 Model(CLASSNAME==clsProducto,OP==Constants.OP_CARDINALITY,QMIN>=1,propOblig:PROPNAME)
		 IndividualValue(IDO==idoProducto,PROPNAME==propOblig,VALOR!=null)
	  )
	   		 
	 produccionProgramada:Long() from accumulate((and 	FactHierarchy(CLASSSUP=="PRODUCCIÓN",idtoClsRoot:IDTO)
	 													ObjValue(IDTO==idtoClsRoot,idoRoot:IDO,PROPNAME=="estado",idoEstado:IDOVALUE!=null)
	 													DatValue(IDO==idoEstado,PROPNAME=="rdn",VALOR=="Programado"||=="Realizado")
	 													ObjValue(IDO==idoRoot,PROPNAME=="línea"||=="consumo",IDOVALUE==idoLinea)
	 												), count(idoEstado))	
	 
	 servido:Long() from accumulate((and 	FactHierarchy(idtoClsRoot:IDTO,CLASSSUP=="PRODUCCIÓN"||=="FLUJO_ARTÍCULOS"||=="REGULARIZACIÓN")
	 	 									ObjValue(IDTO==idtoClsRoot,idoRoot:IDO,PROPNAME=="línea"||=="consumo",IDOVALUE==idoLinea)
	 	 									DatValue(IDO==idoLinea,PROPNAME=="cantidad",QMIN!=0)
	 	 							),count(idoRoot))	
	 eval(namePropReq.contains(propLineaReq)||namePropReq.contains("medida")&&propLineaReq.contains("medida"))
	 not(Model(CLASSNAME==claseLinea,PROPNAME==propLineaReq,OP==Constants.OP_CARDINALITY,QMIN>=1))
	 
	 //siguiente condicion para descartar otras cosas como un escandallo
	 exists((and FactHierarchy(idtoClsRoot:IDTO,CLASSSUP=="PRODUCCIÓN"||=="DOCUMENTO")
	 	 		 ObjValue(IDTO==idtoClsRoot,PROPNAME=="línea"||=="consumo",IDOVALUE==idoLinea)
	 	 	))
	 
	 factCardArr:ArrayList() from collect(IndividualCardinality(IDO==idoLinea,PROPNAME==propLineaReq,QMIN>=1))	 
	 DatValue(IDO==idoProducto,PROPNAME=="rdn",rdn:VALOR)
	 DatValue(IDO==idoLinea,PROPNAME=="rdn",rdnLinea:VALOR)
	 jb:JBossEngine()
then
 	dma.printRule("\n\n============CARDINALIDAD MINIMA 1 EN  PROPIEDADES ADICIONALES LINEA EN ENTRADA/SALIDA MERCANCIA: state:"+state+" servido,producido:"+servido+","+produccionProgramada+" factcard:"+factCardArr.size()+" namePropReq:"+namePropReq+" propLineaReq:"+propLineaReq+" idoLinea:"+idoLinea +" "+rdn+" "+rdnLinea);
 	//dma.printRule("\n debug  DV producto:\n"+DV);
 	if(namePropReq.contains("lote")){
 		if(servido.intValue()>0||produccionProgramada.intValue()>0){
 			if(factCardArr.size()==0){
 				dma.printRule("Asignando obligatorio"); 
 				dma.setCardinality(idoLinea,idtoLinea,propLineaReq,1);
 			}
 		}else 
 			if(factCardArr.size()>0){
 				dma.printRule("Quitando obligatorio");
 				jb.retractFact((IndividualCardinality)factCardArr.get(0));
 			}
 	}else{
 		if(state.equals(Constants.INDIVIDUAL_STATE_DELETED)){
 			if(factCardArr.size()>0){
 				dma.printRule("Quitando obligatorio");
 				jb.retractFact((IndividualCardinality)factCardArr.get(0));
 			}
 		}else{
 			if(factCardArr.size()==0){
 				dma.printRule("Asignando obligatorio");
 				dma.setCardinality(idoLinea,idtoLinea,propLineaReq,1);
 			}
 		}
 	}
end

/*rule "ELIMINAR CARDINALIDAD MINIMA 1 EN PROPIEDAD ADICIONAL LINEA SI YA NO CUELGA DE ENTRADA/SALIDA MERCANCIA/REGULARIZACIÓN"
salience 200
no-loop true
 agenda-group "rules" when 
  	 DocDataModel()
  	 
  	 jb:JBossEngine()
	 ObjValue(idoRoot:IDO!=null,PROPNAME=="línea"||=="consumo",idoLinea:IDOVALUE!=null,idtoLinea:VALUECLS,clsRoot:CLASSNAME)
	 Lock(IDO==idoRoot,clase:CLASSNAME,STATE==Constants.INDIVIDUAL_STATE_LOCK)	 
	 factCard:IndividualCardinality(IDO==idoLinea,namePropReqLinea:PROPNAME=="lote"||=="talla"||=="color",idPropReq:PROP)
	 not(
	 	(and
			 ObjValue(IDO==idoLinea,PROPNAME=="documento",idoFlujoMerca:IDOVALUE!=null,idtoFlujo:VALUECLS)
			 FactHierarchy(IDTO==idtoFlujo,CLASSSUP=="PRODUCCIÓN"||=="ENTRADA_ARTÍCULOS"||=="SALIDA_ARTÍCULOS"||=="REGULARIZACIÓN")			 
		)
	 )
then
 	dma.printRule("\n\n============ELIMINAR CARDINALIDAD MINIMA 1 EN PROPIEDAD ADICIONAL LINEA SI YA NO CUELGA DE ENTRADA/SALIDA MERCANCIA/REGULARIZACIÓN:"+clsRoot+"  namePropReqLinea:"+namePropReqLinea+" idoLinea:"+idoLinea);
 	jb.retractFact(factCard);
end*/

rule "CARDINALIDAD 1 EN ORIGEN/DESTINO DE LÍNEA EN ENTRADAS/SALIDAS MERCANCIA SI SE TOMA CENTRO TRABAJO"
 agenda-group "rules" when 
  	 
	 FactHierarchy(idtoClsRoot:IDTO,classSup:CLASSSUP=="PRODUCCIÓN"||=="FLUJO_ARTÍCULOS")
	 Lock(IDTO==idtoClsRoot,idoRoot:IDO!=null,clase:CLASSNAME,STATE==Constants.INDIVIDUAL_STATE_LOCK)
	 ObjValue(IDO==idoRoot,propLinea:PROPNAME=="línea"||=="consumo",idoLinea:IDOVALUE!=null,idtoLinea:VALUECLS,claseLinea:RANGENAME)
	 Individual(IDO==idoLinea)//PARA que no se active con filtros
	 Model(CLASSNAME==claseLinea,propAlmacenLinea:PROPNAME=="almacén_origen"||=="almacén_destino",OP==Constants.OP_INTERSECTION)
	 ObjValue(IDO==idoRoot,propAlmacenDoc:PROPNAME=="origen"||=="destino",IDOVALUE!=null)	 
	 ObjValue(IDO==idoRoot,PROPNAME==propAlmacenDoc,IDOVALUE!=null,idtoCentroTrabajo:VALUECLS)
	 FactHierarchy(IDTO==idtoCentroTrabajo,CLASSSUP=="CENTRO_TRABAJO")
	 //revisar con cambio que ahora albaran cliente es tambien entrada
	 //(or
	 //	eval(propAlmacenLinea.equals("almacén_origen")&& propAlmacenDoc.equals("origen")&&(classSup.equals("SALIDA_ARTÍCULOS")&&propLinea.equals("línea")||classSup.equals("PRODUCCIÓN")&&propLinea.equals("consumo")))
	//eval(propAlmacenLinea.equals("almacén_destino")&& propLinea.equals("línea")&& propAlmacenDoc.equals("destino")&&(classSup.equals("ENTRADA_ARTÍCULOS")||classSup.equals("PRODUCCIÓN")))	 	
	 //)
	 not(Model(CLASSNAME==claseLinea,PROPNAME==propAlmacenLinea,OP==Constants.OP_CARDINALITY,QMIN==1))
	 not(IndividualCardinality(IDO==idoLinea,PROPNAME==propAlmacenLinea,OP==Constants.OP_CARDINALITY,QMIN==1))
then
 	dma.printRule("\n\n============CARDINALIDAD 1 EN ORIGEN/DESTINO DE LÍNEA EN ENTRADAS/SALIDAS MERCANCIA SI SE TOMA CENTRO TRABAJO: classSup:="+classSup+"  propAlmacenLinea:"+propAlmacenLinea+" propAlmacenDoc:"+propAlmacenDoc+"  idoLinea:"+idoLinea);
 	dma.setCardinality(idoLinea,idtoLinea,propAlmacenLinea,1);
end


rule "ELIMINAR CARDINALIDAD 1 EN ORIGEN/DESTINO DE LÍNEA EN ENTRADAS/SALIDAS MERCANCIA SI NO SE TOMA CENTRO TRABAJO"
 agenda-group "rules" when 
  	 
  	 jb:JBossEngine()
	 FactHierarchy(idtoClsRoot:IDTO,classSup:CLASSSUP=="FLUJO_ARTÍCULOS")
	 Lock(IDTO==idtoClsRoot,idoRoot:IDO!=null,clase:CLASSNAME,STATE==Constants.INDIVIDUAL_STATE_LOCK)
	 ObjValue(IDO==idoRoot,PROPNAME=="línea",idoLinea:IDOVALUE!=null,idtoLinea:VALUECLS,claseLinea:RANGENAME)
	 Individual(IDO==idoLinea)//PARA que no se active con filtros
	 Model(CLASSNAME==claseLinea,propAlmacenLinea:PROPNAME=="almacén_origen"||=="almacén_destino",OP==Constants.OP_INTERSECTION)	 
	 fcard:IndividualCardinality(IDO==idoLinea,PROPNAME==propAlmacenLinea,QMIN==1)
	 //eval((propAlmacenLinea.equals("almacén_destino")&&classSup.equals("ENTRADA_ARTÍCULOS"))||(propAlmacenLinea.equals("almacén_origen")&&classSup.equals("SALIDA_ARTÍCULOS")))
	 forall(
	 	 ObjValue(IDO==idoRoot,propAlmacenDoc:PROPNAME=="origen",IDOVALUE!=null)	 
		 ObjValue(IDO==idoRoot,PROPNAME==propAlmacenDoc,IDOVALUE!=null,idtoAlmacen:VALUECLS)
		 FactHierarchy(IDTO==idtoAlmacen,CLASSSUP=="ALMACÉN")
	 )
	  forall(
	 	 ObjValue(IDO==idoRoot,propAlmacenDoc:PROPNAME=="destino",IDOVALUE!=null)	 
		 ObjValue(IDO==idoRoot,PROPNAME==propAlmacenDoc,IDOVALUE!=null,idtoAlmacen:VALUECLS)
		 FactHierarchy(IDTO==idtoAlmacen,CLASSSUP=="ALMACÉN")
	 )
	 
	 
	 
then
 	dma.printRule("\n\n============CARDINALIDAD 1 EN ORIGEN/DESTINO DE LÍNEA EN ENTRADAS/SALIDAS MERCANCIA SI NO SE TOMA CENTRO TRABAJO: classSup:="+classSup+"  propAlmacenLinea:"+propAlmacenLinea+" idoLinea:"+idoLinea);
	jb.retractFact(fcard);
end

