package dynagent.ruleengine.src.ruler.ERPrules;
import dynagent.ruleengine.src.ruler.ERPrules.*;
import dynagent.ruleengine.src.ruler.*;
import dynagent.ruleengine.src.ruler.ERPrules.datarules.StringChanged;
import java.util.*;
import dynagent.common.basicobjects.*;

import dynagent.common.properties.*;
import dynagent.common.knowledge.*;
import dynagent.ruleengine.meta.api.*;
import dynagent.common.properties.values.*;
import dynagent.common.utils.Auxiliar;
import dynagent.common.Constants;
import dynagent.common.exceptions.*;
import org.drools.WorkingMemory;
global DataModelAdapter dma;


function void setCoste(int idoArticulo, int idtoArticulo,double costeMedioInit,double totalQcurr,double totalImporteCurr, double stockTotal,DataModelAdapter dma){
	
	dma.printRule(" COSTES "+stockTotal+" "+totalImporteCurr+ " cm old "+totalQcurr);
	double stockCostePrevio= stockTotal-totalQcurr;
	
	if((totalImporteCurr!=0.0 || totalQcurr!=0.0) && stockTotal>0.0){							
		dma.printRule(" COSTE ARTICULO cm old "+costeMedioInit+" numerador "+(stockCostePrevio*costeMedioInit+totalImporteCurr)+" cuenta "+((stockCostePrevio*costeMedioInit+totalImporteCurr)/(stockTotal))+" redn " +Auxiliar.redondea((stockCostePrevio*costeMedioInit+totalImporteCurr)/(stockTotal),3));			

		//La formula se obtiene separando 3 cantidades: Q1 (el stock inicial sin contar cant actual de la linea), Q2 (el stock de la linea actual), 
		// Q1 es Stock inicial - Cant linea inicial 
		DoubleValue nuevoCosteMedio=new DoubleValue(Auxiliar.redondea((stockCostePrevio*costeMedioInit+totalImporteCurr)/(stockTotal),3));	
		dma.printRule(" NUEVO COSTE MEDIO "+nuevoCosteMedio.getValue());
		dma.setValueNotLock(idoArticulo,idtoArticulo,"coste",nuevoCosteMedio);
	}	
	DoubleValue nuevoCosteActual=null;
	if(totalQcurr!=0){
		nuevoCosteActual=new DoubleValue(Auxiliar.redondea(totalImporteCurr/totalQcurr,3));
		dma.printRule(" NUEVO COSTE ACTUAL "+nuevoCosteActual.getValue()+" "+totalImporteCurr+" "+totalQcurr);
		dma.setValueNotLock(idoArticulo,idtoArticulo,"coste_actual",nuevoCosteActual);
		if(stockTotal<=0.0){
			dma.setValueNotLock(idoArticulo,idtoArticulo,"coste",nuevoCosteActual);
		}			
	}
}

//En compras, o en salidas de produccion, hay un aprovisionamiento donde se propaga el coste de linea al producto que entra

rule "COSTE ARTICULO COMPRAS"
 agenda-group "rules" when 	
 	//El calculo stock medio es encesario realizarlo en el albaran si queremos realizar ventas que reflejen coste y rentabilidad actualizada, de lo contrario, al facturar, tomaria para el calculo de coste del stock 
	// antes de actualizar el coste medio, el coste medio por el stock actual, que contaría arbitrariamente n albaranaes que han entrado y no facturados
	//Idealmente, si a la hora de facturar cambia un precio, podria corregir el coste medio
 	//OJO. Si facturo lineas que no han sido albaranadas, el coste aumenta, pues todo lo gastado en compras se reparte por el stock existente. Pero es correcto
 	// podria hacer que solo atienda a lineas albaranadas, pero perderia que por ejemplo alguien quiera meter que ha comprado 200 unidades a un precio, y estan albaranadas
 	// y posteriormente decir en la factura que dichas 200 unidades tienen un coste extra en una segunda linea, diferenciadas en el concepto, por ejemplo un tratamiento posterior como una limpieza (aunque eso deberia ser otro producto)
 	//Me baso en la factura, por si cambia el precio
	FactHierarchy(idtoArticulo:IDTO,CLASSSUP=="ARTÍCULO")
	DatValue(IDTO==idtoArticulo,idoArticulo:IDO,idArticulo:ID,PROPNAME=="rdn",rdnArt:VALOR)
	
	stockTotal:Double() from accumulate (DatValue(IDO==idoArticulo,PROPNAME=="stock_total",st:QMIN!=null),
										sum(st))		

	costeMedioInit:Double() from accumulate (DatValue(IDO==idoArticulo,PROPNAME=="coste",c:INITIALDOUBLE!=null),
										sum(c))	
							
	//RENDIMIENTO, PERFORMANCE: si en vez de dos acumulate con array de resultado, pongo 4 como habia antes (separando fact cantidad de importe, drools se veuleve loco
	// en un albaran de compra (facturado y pedido con 70 lineas mismo producto - diferente serie -) tarda 15 minutos				
										
	totalCurr:ArrayList(size>0) from accumulate((and	FactHierarchy(idtoF:IDTO,CLASSSUP=="FACTURA_PROVEEDOR")		
												Individual(IDTO==idtoF,idoF:IDO,prodState:STATE)																							
												ObjValue(IDO==idoF,PROPNAME=="línea",idoLineaAny:IDOVALUE)
												ObjValue(IDO==idoLineaAny,PROPNAME=="producto",IDOVALUE==idoArticulo)												
												//La siguiente condicion de existe permite calcular coste medio solo en base a lineas ya albaranadas.
												//Asi se evita que si por lo que sea, tras un albaran llega una factura parcial, con menor cantidad, o mayor por error, pues no 
												//haya que esperar a que llegue la factura que la completa para compensarse los costes, ya que si entre 10 unidades y facturo 5, el coste aparentiaria ser la mitad
												FactHierarchy(idtoAlb:IDTO,CLASSSUP=="ALBARÁN_PROVEEDOR")															
												ObjValue(IDO==idoLineaAny,PROPNAME=="documento",VALUECLS==idtoAlb)
																																																											
												DatValue(IDO==idoF,PROPNAME=="factor_descuento_global",descuentoGlobal:QMIN!=null)	
												DatValue(IDO==idoLineaAny,PROPNAME=="importe", i:DOUBLEVALUE!=null)																									
												DatValue(IDO==idoLineaAny,PROPNAME=="cantidad", q:QMIN!=null)),
									init(ArrayList res=new ArrayList();res.add(new Double(0.0));res.add(new Double(0.0));)
									action(		
											int signo=prodState.equals(Constants.INDIVIDUAL_STATE_READY)?1:-1;
											res.set(0,(Double)res.get(0)+q*signo);
											res.set(1,(Double)res.get(1)+i*(1-descuentoGlobal)*signo);
									),
									reverse(
											int signo=prodState.equals(Constants.INDIVIDUAL_STATE_READY)?1:-1;
											res.set(0,(Double)res.get(0)-q*signo);
											res.set(1,(Double)res.get(1)-i*(1-descuentoGlobal)*signo);
									)
									result(res))																
then				
	
	dma.printRule("========== COSTE ARTICULO COMPRAS "+rdnArt);
	double totalImporteCurr=(Double)totalCurr.get(1),totalQcurr=(Double)totalCurr.get(0);
	setCoste(idoArticulo,idtoArticulo,costeMedioInit,totalQcurr,totalImporteCurr,stockTotal,dma);
end


rule "COSTE ARTICULO PRODUCCION"
//Se calcula coste de lineas de salida de trabajos (que tambien se aplica con igual valor a coste de demanda cadena padre).
//POr tanto el coste de salida de lineas es un coste actual y no medio
salience -150 //(ojo se recalcula al actualizarse stock total que solo se actualiza si hay lote). POnemos menos prioridad que stock total para reducir disparos
 agenda-group "rules" when 	
 	FactHierarchy(idtoRoot:IDTO,clsSup:CLASSSUP=="PRODUCCIÓN")						
 	Individual(IDTO==idtoRoot,idoRoot:IDO,STATE==Constants.INDIVIDUAL_STATE_READY)																	
	ObjValue(IDO==idoRoot,PROPNAME=="estado",idoEstado:IDOVALUE!=null)
	DatValue(IDO==idoEstado,PROPNAME=="rdn",VALOR=="Programado"||=="Realizado")		
	DatValue(IDO==idoRoot,PROPNAME=="es_despiece",esDespiece:BOOLEANVALOR!=null)											

	FactHierarchy(idtoArticulo:IDTO,CLASSSUP=="ARTÍCULO")
	DatValue(IDTO==idtoArticulo,idoArticulo:IDO,idArticulo:ID,PROPNAME=="rdn",rdnArt:VALOR)		
	//Utilizo model poruqe las condiciones de es despiece falla en acumulador
	Model(IDTO==idtoRoot,propOut:PROPNAME==(esDespiece?"consumo":"línea"),OP==Constants.OP_INTERSECTION)
	Model(IDTO==idtoRoot,propIn:PROPNAME==(esDespiece?"línea":"consumo"),OP==Constants.OP_INTERSECTION)																																																									
										
	costeCurr:Double() from accumulate((and		ObjValue(IDO==idoRoot,PROPNAME==propIn||=="programación"||=="ejecutado",idoLineaAny:IDOVALUE)																																																																																	
												DatValue(IDO==idoLineaAny,PROPNAME=="coste_unitario", i:DOUBLEVALUE!=null)																									
												DatValue(IDO==idoLineaAny,PROPNAME=="cantidad", q:QMIN!=null)),sum(q*i))										

	existeCadena:Long() from accumulate((and		FactHierarchy(idtoCadena:IDTO,CLASSSUP=="PRODUCCIÓN_CADENA")		
													ObjValue(IDTO==idtoCadena,idoCadena:IDO,PROPNAME=="producción",IDOVALUE==idoRoot)),	count(idoCadena))									
then	
	dma.printRule("========== COSTE ARTICULO PRODUCCION art:"+rdnArt+" "+" es despiece: "+esDespiece+" prop in:"+propIn+" "+costeCurr);
	
	double qOut=0.0;
	
	Domain domArticulo=new Domain(idoArticulo,idtoArticulo);
	
	//Stock total y coste medio Init los capturo en consecuente pues muchos acumulate provoca problema desproporcionado de rendimiento
	double stockTotal=dma.getDoubleValue(domArticulo,"stock_total",true);
	double costeMedioInit=0.0;
	StringChanged sc=dma.getInitialValue(idoArticulo,"coste");
	if(sc!=null && sc.getValor()!=null){
		costeMedioInit=Double.parseDouble(sc.getValor());
	}
	
	LinkedList<Value> outLineas=dma.getValues(idoRoot,idtoRoot,propOut);
	
	ArrayList<Domain> outLineasArr=new ArrayList<Domain>();
	
	for(Value ovLin:outLineas){
		Domain domLin=null;
		dma.printRule("OUT LIN:"+ovLin+" "+(ovLin!=null?ovLin.getClass().getName():""));
		if(ovLin!=null && ovLin instanceof ObjectValue){
			domLin=new Domain((ObjectValue)ovLin);
			ObjectValue proOv=(ObjectValue)dma.getValue(domLin,"producto");
			
			if(proOv!=null && proOv.getValue().equals(idoArticulo) && proOv.getValueCls()==idtoArticulo){							
				qOut+=dma.getDoubleValue(domLin,"cantidad",true);
				dma.printRule("QUOT:"+qOut);
				outLineasArr.add(domLin);		
			}
		}
	}
	
	if(qOut!=0.0){	
		double costeUnitario=costeCurr/qOut;
		dma.printRule("QOUT "+qOut+" coste unit:"+costeUnitario);
		for(Domain dv:outLineasArr){
			dma.setDoubleValue(dv,"coste_unitario",costeUnitario);		
		}

		//si hay produccion cadena debe calcularse coste actual en la demanda
		if(existeCadena.intValue()==0)	setCoste(idoArticulo,idtoArticulo,costeMedioInit,qOut,costeCurr,stockTotal,dma);	
	}
end

rule "COSTE ARTICULO ESCANDALLO"
 agenda-group "rules" when 	
 	FactHierarchy(idtoRoot:IDTO,CLASSSUP=="ESCANDALLO")						
 	Lock(IDTO==idtoRoot,idoRoot:IDO,LOCKEDBYUSER==true)																		
	DatValue(IDO==idoRoot,PROPNAME=="es_despiece",esDespiece:BOOLEANVALOR!=null)											

	FactHierarchy(idtoArticulo:IDTO,CLASSSUP=="ARTÍCULO")
	DatValue(IDTO==idtoArticulo,idoArticulo:IDO,idArticulo:ID,PROPNAME=="rdn",rdnArt:VALOR)		
	//Utilizo model poruqe las condiciones de es despiece falla en acumulador
	Model(IDTO==idtoRoot,propOut:PROPNAME==(esDespiece?"componente":"salida"),OP==Constants.OP_INTERSECTION)
	Model(IDTO==idtoRoot,propIn:PROPNAME==(esDespiece?"salida":"componente"),OP==Constants.OP_INTERSECTION)																																																									
										
	costeCurr:Double() from accumulate((and		ObjValue(IDO==idoRoot,PROPNAME==propIn,idoLineaAny:IDOVALUE)																																																																																	
												ObjValue(IDO==idoLineaAny,PROPNAME=="producto", idoProd:IDOVALUE)																									
												DatValue(IDO==idoLineaAny,PROPNAME=="cantidad", q:QMIN!=null)
												DatValue(IDO==idoProd,PROPNAME=="coste", i:QMIN!=null)
										),sum(q*i))																			
then	
	dma.printRule("========== COSTE ARTICULO ESCANDALLO art:"+rdnArt+" "+" es despiece: "+esDespiece+" prop in:"+propIn+" "+costeCurr);
	
	double qOut=0.0;
	
	Domain domArticulo=new Domain(idoArticulo,idtoArticulo);
	
	LinkedList<Value> outLineas=dma.getValues(idoRoot,idtoRoot,propOut);
	
	ArrayList<Domain> outLineasArr=new ArrayList<Domain>();
	
	for(Value ovLin:outLineas){
		Domain domLin=null;
		dma.printRule("OUT LIN:"+ovLin+" "+(ovLin!=null?ovLin.getClass().getName():""));
		if(ovLin!=null && ovLin instanceof ObjectValue){
			domLin=new Domain((ObjectValue)ovLin);
			ObjectValue proOv=(ObjectValue)dma.getValue(domLin,"producto");
			
			if(proOv!=null && proOv.getValue().equals(idoArticulo) && proOv.getValueCls()==idtoArticulo){							
				qOut+=dma.getDoubleValue(domLin,"cantidad",true);
				dma.printRule("QUOT:"+qOut);
				outLineasArr.add(domLin);		
			}
		}
	}
	
	if(qOut!=0.0){	
		double costeUnitario=costeCurr/qOut;
		dma.printRule("QOUT "+qOut+" coste unit:"+costeUnitario);
		for(Domain dv:outLineasArr){
			dma.setDoubleValue(dv,"coste_unitario",costeUnitario);		
		}
	}
end

rule "COSTE ARTICULO PRODUCCION CADENA"
//Se calcula coste de lineas de salida de trabajos (que tambien se aplica con igual valor a coste de demanda cadena padre).
//POr tanto el coste de salida de lineas es un coste actual y no medio
salience -150 //(ojo se recalcula al actualizarse stock total que solo se actualiza si hay lote). POnemos menos prioridad que stock total para reducir disparos
 agenda-group "rules" when 	
 	FactHierarchy(idtoCadena:IDTO,clsSup:CLASSSUP=="PRODUCCIÓN_CADENA")						
 	Individual(IDTO==idtoCadena,idoCadena:IDO,prodState:STATE)																	
	ObjValue(IDO==idoCadena,PROPNAME=="estado",idoEstado:IDOVALUE!=null)
	DatValue(IDO==idoEstado,PROPNAME=="rdn",VALOR=="Programado"||=="Realizado")													

	FactHierarchy(idtoArticulo:IDTO,CLASSSUP=="ARTÍCULO")
	DatValue(IDTO==idtoArticulo,idoArticulo:IDO,idArticulo:ID,PROPNAME=="rdn",rdnArt:VALOR)	
		
	//Utilizo model poruqe las condiciones de es despiece falla en acumulador																																																									
	
	demandaCadena:ArrayList(size>0) from accumulate((and													
												ObjValue(IDO==idoCadena,PROPNAME=="línea",idoLineaDem:IDOVALUE)
												ObjValue(IDO==idoLineaDem,idtoDem:IDTO,PROPNAME=="producto",IDOVALUE==idoArticulo)
												f:DatValue(IDO==idoLineaDem,PROPNAME=="cantidad",q:QMIN!=null)
												),
												init(ArrayList res=new ArrayList();),
												action(res.add(f);),
												reverse(;),
												result(res))
												
											
	costeCurr:Double() from accumulate((and		ObjValue(IDO==idoCadena,PROPNAME=="producción",idoProd:IDOVALUE,idtoProd:VALUECLS)
												DatValue(IDO==idoProd,PROPNAME=="es_despiece",esDespiece:BOOLEANVALOR!=null)
												Model(IDTO==idtoProd,propIn:PROPNAME==(esDespiece?"línea":"consumo"),OP==Constants.OP_INTERSECTION)
												ObjValue(IDO==idoProd,PROPNAME==propIn||=="programación"||=="ejecutado",idoLineaAny:IDOVALUE)																																																																																	
												DatValue(IDO==idoLineaAny,PROPNAME=="coste_unitario", i:DOUBLEVALUE!=null)																									
												DatValue(IDO==idoLineaAny,PROPNAME=="cantidad", q:QMIN!=null)),sum(q*i))
												
	costeTask:Double() from accumulate((and		FactHierarchy(idtoTask:IDTO,CLASSSUP=="TAREA")
												ObjValue(IDO==idoCadena,PROPNAME=="producción",idoTask:IDOVALUE,VALUECLS==idtoTask)
												ObjValue(IDO==idoTask,PROPNAME=="programación"||=="ejecutado",idoLineaAny:IDOVALUE)																																																																																	
												DatValue(IDO==idoLineaAny,PROPNAME=="coste_unitario", i:DOUBLEVALUE!=null)																									
												DatValue(IDO==idoLineaAny,PROPNAME=="cantidad", q:QMIN!=null)),sum(q*i))												
	DatValue(IDO==idoArticulo,PROPNAME=="stock_total",stockTotal:DOUBLEVALUE!=null)	
then	
	dma.printRule("========== COSTE ARTICULO PRODUCCION CADENA art:"+rdnArt+" "+costeCurr+" demSize:"+demandaCadena.size());
	
	double qOut=0.0;
	
	Domain domArticulo=new Domain(idoArticulo,idtoArticulo);
	
	//coste medio Init los capturo en consecuente pues muchos acumulate provoca problema desproporcionado de rendimiento
	double costeMedioInit=0.0;
	StringChanged sc=dma.getInitialValue(idoArticulo,"coste");
	if(sc!=null && sc.getValor()!=null){
		costeMedioInit=Double.parseDouble(sc.getValor());
	}
	if(costeMedioInit==0.0){
		dma.printRule("Coste Init cero");
		sc=dma.getInitialValue(idoArticulo,"coste_actual");
		if(sc!=null && sc.getValor()!=null){
			costeMedioInit=Double.parseDouble(sc.getValor());
			dma.printRule("Coste Init actual "+costeMedioInit);
		}
	}
	
	for(DatValue dv:(ArrayList<DatValue>)demandaCadena){
		qOut+=dv.getDOUBLEVALUE();
	}
	
	double costeProdTotal=costeTask+costeCurr;
	double costeUnitario=costeProdTotal/qOut;
	
	if(prodState.equals(Constants.INDIVIDUAL_STATE_READY)){
		for(DatValue ov:(ArrayList<DatValue>)demandaCadena){
			Domain dv=new Domain(ov.getIDO(),ov.getIDTO());
			dma.setDoubleValue(dv,"coste_unitario",costeUnitario);
		}
	}else{
		dma.printRule("ELIMINANDO PRODUCCION CADENA");
		qOut=-qOut;
		costeProdTotal=-costeProdTotal;
	}
	setCoste(idoArticulo,idtoArticulo,costeMedioInit,qOut,costeProdTotal,stockTotal,dma);

end


rule "COSTE UNITARIO EN SUBTAREA A DEDICACION COMUN"
	//Esta regla es para propagar el coste de articulo o recurso a la linea que consume (consumo en produccion o linea en venta).
	//Por el contrario en compras, o en salidas de produccion, hay un aprovisionamiento donde se propaga el coste de linea al producto que entra
 	//No puede tener menos prioridad que agregar, porque depende de hasChanged
 agenda-group "rules" when 	
 	FactHierarchy(idtoRoot:IDTO,CLASSSUP=="TAREA"||=="DOCUMENTO")//produccion material es documento, tarea no
 	ObjValue(IDTO==idtoRoot,idoTask:IDO,propLine:PROPNAME=="línea"||=="subtarea"||=="consumo"||=="programación"||=="ejecutado",idoSub:IDOVALUE,chSub:hasCHANGED) 
	ObjValue(IDO==idoSub,idtoSub:IDTO,PROPNAME=="producto",idoProd:IDOVALUE!=null,idtoProd:VALUECLS,chPro:hasCHANGED)		
	Individual(IDO==idoSub,STATE==Constants.INDIVIDUAL_STATE_READY)
	DatValue(IDO==idoProd,PROPNAME=="rdn",rdnProd:VALOR)
	
	(or eval(chSub||chPro)
		exists(DatValue(IDO==idoTask,PROPNAME=="fecha_inicio",hasCHANGED==true))
		exists(ObjValue(IDO==idoSub,PROPNAME=="recurso", hasCHANGED==true))
	 	exists((and ObjValue(IDO==idoTask,PROPNAME=="dedicación",idoAny:IDOVALUE)
	 				IndividualValue(IDO==idoAny,hasCHANGED==true))))
	
	not((and DatValue(IDO==idoTask,PROPNAME=="es_despiece",esDespiece:BOOLEANVALOR!=null)
			eval(esDespiece && propLine.equals("línea") || !esDespiece && propLine.equals("consumo"))
		)
		) 	
												
	costeMedioArt:Double() from accumulate(DatValue(IDO==idoProd,PROPNAME=="coste",DOUBLEVALUE!=null,costeArt:QMIN!=null),sum(costeArt))
	costeActualArt:Double() from accumulate(DatValue(IDO==idoProd,PROPNAME=="coste_actual",DOUBLEVALUE!=null,c:QMIN!=null),sum(c))		 				
	
	costeComunDedicado:Double() from accumulate((and 	ObjValue(IDO==idoSub,prop:PROPNAME=="recurso_resuelto"||=="recurso", idoRecurso:IDOVALUE)
														forall(FactHierarchy(IDTO==idtoSub,CLASSSUP=="SUBTAREA")
															   ObjValue(IDO==idoSub,PROPNAME==prop&&=="recurso_resuelto", IDOVALUE==idoRecurso))
													   
														ObjValue(IDO==idoTask,PROPNAME=="dedicación",idoDedicacion:IDOVALUE) 						
														ObjValue(IDO==idoDedicacion,PROPNAME=="recurso", IDOVALUE==idoRecurso)
														DatValue(IDO==idoDedicacion,PROPNAME=="porcentaje_dedicación", ded:DOUBLEVALUE!=null)		
														ObjValue(IDO==idoRecurso, PROPNAME=="costes",idoCostes:IDOVALUE)								
														DatValue(IDO==idoCostes, PROPNAME=="coste",coste:DOUBLEVALUE!=null)),
												sum(coste*ded/100))
										
	costeComunNodedicado:Double() from accumulate((and 	ObjValue(IDO==idoSub,prop:PROPNAME=="recurso_resuelto"||=="recurso", idoRecurso:IDOVALUE)																											   
														not((and ObjValue(IDO==idoTask,PROPNAME=="dedicación",idoDedicacion:IDOVALUE) 						
																 ObjValue(IDO==idoDedicacion,PROPNAME=="recurso", IDOVALUE==idoRecurso)))		
														ObjValue(IDO==idoRecurso, PROPNAME=="costes",idoCostes:IDOVALUE)								
														DatValue(IDO==idoCostes, PROPNAME=="coste",coste:DOUBLEVALUE!=null)),
												sum(coste))
								
								
	dedicacionTotal:Double() from accumulate((and	ObjValue(IDO==idoTask,PROPNAME=="dedicación",idoDedicacion:IDOVALUE)
													DatValue(IDO==idoDedicacion,PROPNAME=="porcentaje_dedicación", ded:DOUBLEVALUE!=null) 																			
												),
												sum(ded/100))
	
	costeEspecifico:Double() from accumulate((and	ObjValue(IDO==idoSub,PROPNAME=="recurso", idoRecurso:IDOVALUE)		
													ObjValue(IDO==idoRecurso, PROPNAME=="costes",idoCostes:IDOVALUE)								
													DatValue(IDO==idoCostes, PROPNAME=="coste",coste:DOUBLEVALUE!=null)),
												sum(coste))
												
	costeUnitarioEnBaseCosteActual:Long() from accumulate((and 	FactHierarchy(IDTO==idtoRoot,CLASSSUP=="PRODUCCIÓN")
																DatValue(CLASSNAME=="PARAMETRO_VERDADERO",idoParam:IDO,PROPNAME=="rdn",VALOR=="coste_unitario_produccion_basado_coste_actual")
																DatValue(IDO==idoParam,PROPNAME=="activo",VALOR=="true")),count(idoParam))			
	//porcentajeRealizacion:Double() from accumulate(DatValue(IDO==idoSub,PROPNAME=="porcentaje_realización",DOUBLEVALUE!=null,realiz:QMIN!=null),sum(realiz))	
							
then
	dma.printRule("==========COSTE UNITARIO EN SUBTAREA A DEDICACION COMUN prod:"+rdnProd+" costeComunDedicado:"+costeComunDedicado+" "+costeComunNodedicado+" basado actual:"+costeUnitarioEnBaseCosteActual.intValue());
	//en parte trabajo porcentaje realizacion es 100%
	double costeComunNodedicadoVar=costeComunNodedicado;
	
	//if(dma.isSpecialized(idtoSub,dma.getIdClass("LÍNEA_SERVICIO"))) costeComunNodedicadoVar=costeComunNodedicadoVar*(porcentajeRealizacion/100.0);
	
	if(costeActualArt.doubleValue()==0.0&&costeEspecifico.doubleValue()!=0.0){
		dma.setValueNotLock(idoProd,idtoProd,"coste_actual",new DoubleValue(Auxiliar.redondea(costeEspecifico,4)));
		dma.setValueNotLock(idoProd,idtoProd,"coste",new DoubleValue(Auxiliar.redondea(costeEspecifico,4)));
		costeMedioArt=costeEspecifico;
		costeActualArt=costeEspecifico;
	} 
	double costeMedio=costeEspecifico;
	if(costeEspecifico.equals(0.0)){
		if(costeComunDedicado>0){
			costeMedio=costeComunDedicado/dedicacionTotal;
		}else{
			if(costeComunNodedicado>0){
				costeMedio=costeComunNodedicadoVar;
			}else{
				costeMedio=costeMedioArt.doubleValue()==0.0 ? costeActualArt:costeMedioArt;
			}
		}
	}
	
	dma.printRule(" cm "+costeMedio);
	if(costeMedio!=0.0){
		dma.printRule(" nuevo coste "+costeMedio);
		if(costeUnitarioEnBaseCosteActual.intValue()>0) costeMedio=costeActualArt;
		
		dma.setValueNotLock(idoSub,idtoSub,"coste_unitario",new DoubleValue(Auxiliar.redondea(costeMedio,4)));
	}
end


rule "INFORMAR NO HAY DATOS PARA CALCULAR COSTE UNITARIO"
salience -200//impte prioridad baja para que reglas precargas se puedan disparar antes
 agenda-group "rules" when 
	
	FactHierarchy(idtoLinea:IDTO,CLASSSUP=="LÍNEA_SERVICIO"||=="SUBTAREA")
	Lock(IDTO==idtoLinea,idolinea:IDO!=null,STATE==Constants.INDIVIDUAL_STATE_LOCK)
	ObjValue(IDOVALUE==idolinea,idtoDominio:IDTO)
	FactHierarchy(IDTO==idtoDominio,CLASSSUP=="FACTURA_PROVEEDOR"||=="ALBARÁN_CLIENTE"||=="PRODUCCIÓN")
	
	ObjValue(IDO==idolinea, PROPNAME=="producto",idArt:VALOR!=null,idtoArt:VALUECLS)
	eval(dma.preload(Integer.parseInt(idArt), idtoArt))	
	ObjValue(IDO==idolinea, PROPNAME=="recurso",idRecurso:VALOR!=null,idtoRecurso:VALUECLS)
	eval(dma.preload(Integer.parseInt(idRecurso), idtoRecurso))		
	DatValue(IDO==idolinea, PROPNAME=="rdn",rdnLinea:VALOR!=null)	
	ObjValue(idoDoc:IDO!=null,classDoc:CLASSNAME, PROPNAME=="consumo"||=="línea"||=="subtarea",IDOVALUE==idolinea )
	DatValue(IDO==idoDoc, PROPNAME=="rdn",rdnDoc:VALOR!=null)	
	not(
		(and
			ObjValue(ID==idArt, PROPNAME=="unidad",unidad:VALOR)							
			ObjValue(ID==idRecurso, PROPNAME=="costes",idCostesRecurso:VALOR!=null)								
			ObjValue(ID==idCostesRecurso, PROPNAME=="unidad",VALOR==unidad)
			DatValue(ID==idCostesRecurso, PROPNAME=="coste",costeRecurso:DOUBLEVALUE!=null)
		)
	)
then
	dma.printRule("\n\n ========================  INFORMAR NO HAY DATOS PARA CALCULAR COSTE UNITARIO");
	dma.showMessage("Para los datos de recurso y producto seleccionados en la línea "+rdnLinea+" de "+classDoc+" "+rdnDoc+" no se puede calcular su coste unitario");
end



rule "FECHA ULTIMA COMPRA DE UN CLIENTE ES LA ULTIMA FECHA QUE SE LE VENDIO ALGO"
salience -100
agenda-group "rules" when
	FactHierarchy(idtoDoc:IDTO,tipoDoc:CLASSSUP=="DOCUMENTO_VENTA_NOMINATIVO")
	Lock(IDTO==idtoDoc,STATE==Constants.INDIVIDUAL_STATE_END_LOCK,idoDoc:IDO)
	not( FactHierarchy(IDTO==idtoDoc,CLASSSUP=="PRESUPUESTO"))
	DatValue(IDO==idoDoc,IDTO==idtoDoc,PROPNAME=="fecha",fechaDoc:QMIN!=null)
	ObjValue(IDO==idoDoc,PROPNAME=="cliente",idoCliente:IDOVALUE!=null,idtoCliente:VALUECLS!=null,clsCliente:RANGENAME)
	Individual(IDO==idoCliente)//para que no actue por ejemplo en planificar pedidos que no se precarga clientes. Si actua el set provoca cargar el cliente
	Model(CLASSNAME==clsCliente,PROPNAME=="fecha_última_compra",OP==Constants.OP_INTERSECTION)
	ObjValue(IDO==idoDoc,PROPNAME=="línea",idoLinea:IDOVALUE!=null)
then
	dma.printRule("\n\n===============  FECHA ULTIMA COMPRA DE UN CLIENTE ES LA ULTIMA FECHA QUE SE LE VENDIO ALGO ");
	
	if(idoDoc>0){
		TimeValue fechaCurrTV=(TimeValue)dma.getValue(idoCliente,idtoCliente,"fecha_última_compra");
		long fechaCurr=0;
		if(fechaCurrTV!=null) fechaCurr=fechaCurrTV.getRelativeSecondsMax();
		if(fechaDoc>fechaCurr)	dma.setValueNotLock(idoCliente,idtoCliente,"fecha_última_compra",new TimeValue(fechaDoc.longValue()));
	}else
		dma.setValueNotLock(idoCliente,idtoCliente,"fecha_última_compra",new TimeValue(fechaDoc.longValue()));
end	

rule "FECHA ULTIMA COMPRA/VENTA ARTICULO"
salience -200
agenda-group "rules" when
	
	FactHierarchy(idtoDoc:IDTO,tipoDoc:CLASSSUP=="DOCUMENTO_VENTA"||=="DOCUMENTO_COMPRA")
	not( FactHierarchy(IDTO==idtoDoc,CLASSSUP=="PRESUPUESTO"))
		
	ObjValue(IDTO==idtoDoc,idoDoc:IDO,PROPNAME=="línea",idoLinea:IDOVALUE)
	DatValue(IDO==idoDoc,PROPNAME=="fecha",fechaDoc:QMIN!=null,fechaDocChanged:hasCHANGED)	
	ObjValue(IDO==idoLinea, PROPNAME=="producto",idoProducto:IDOVALUE!=null,idtoProducto:VALUECLS,productoChanged:hasCHANGED)
	
	eval(productoChanged||fechaDocChanged)	
then
	dma.printRule("===============FECHA ULTIMA COMPRA/VENTA ARTICULO");
	String propiedadfecha="fecha_última_venta";
	if(tipoDoc.equals("DOCUMENTO_COMPRA")) 
		propiedadfecha="fecha_última_compra";
		
	if(idoDoc>0){
		TimeValue fechaCurrTV=(TimeValue)dma.getValue(idoProducto,idtoProducto,propiedadfecha);
		long fechaCurr=0;
		if(fechaCurrTV!=null) fechaCurr=fechaCurrTV.getRelativeSecondsMax();
		if(fechaDoc>fechaCurr)	dma.setTimeValue(idoProducto,idtoProducto,dma.getIdProperty(propiedadfecha),fechaDoc.longValue(),false);
	}else
		dma.setTimeValue(idoProducto,idtoProducto,dma.getIdProperty(propiedadfecha),fechaDoc.longValue(),false);
end	


rule "COSTE_ACTUAL_PREVIO"
salience 10
agenda-group "rules" when 
	
	FactHierarchy(idtoArt:IDTO,CLASSSUP=="ARTÍCULO")	
	Model(IDTO==idtoArt,PROPNAME=="coste_actual_previo",OP==Constants.OP_INTERSECTION)
	Individual(idoArt:IDO!=null,IDTO==idtoArt,STATE==Constants.INDIVIDUAL_STATE_READY)
	DatValue(IDO==idoArt,PROPNAME=="coste_actual", initCA:INITIALDOUBLE!=null,valor:DOUBLEVALUE,initialValuesChanged==true)
	initPrevioList:ArrayList() from collect(DatValue(IDO==idoArt,PROPNAME=="coste_actual_previo",INITIALVALOR!=null))
then
	dma.printRule("=========== COSTE_ACTUAL_PREVIO");
	Double initPrevio=null;
	if(initPrevioList.size()==1){
		DatValue f=(DatValue)initPrevioList.get(0);
		initPrevio=f.getINITIALDOUBLE();
	}
	if(valor==null || valor.equals(initCA)){
		if(initPrevio==null) dma.delValuesNotLock(idoArt,idtoArt,"coste_actual_previo");
		else dma.setValueNotLock(idoArt,idtoArt,"coste_actual_previo",new DoubleValue(initPrevio));
	}else{
		dma.setValueNotLock(idoArt,idtoArt,"coste_actual_previo",new DoubleValue(initCA));
	}
end

rule "MARGEN % BENEFICIO EN LINEA"
salience -100 //minima prioridad, lo contrario perjudica el rendimiento
agenda-group "rules" when
	FactHierarchy(idtoDoc:IDTO,CLASSSUP=="DOCUMENTO_COMERCIAL") 
	Individual(IDTO==idtoDoc,idoDoc:IDO,STATE==Constants.INDIVIDUAL_STATE_READY)
	ObjValue(IDO==idoDoc,PROPNAME=="línea",idoLinea:IDOVALUE!=null,idtoLinea:VALUECLS)
	DatValue(IDO==idoLinea,PROPNAME=="coste_unitario",coste:DOUBLEVALUE!=null)
	DatValue(IDO==idoLinea,PROPNAME=="precio",precio:DOUBLEVALUE!=null)
	DatValue(IDO==idoDoc,PROPNAME=="factor_descuento_global",factor:DOUBLEVALUE!=null)	
then
	dma.printRule("==========MARGEN % BENEFICIO EN LINEA");
	dma.setValue(idoLinea,idtoLinea,"margen_beneficio",new DoubleValue(Auxiliar.redondea(100*(1-(coste/(precio*(1-factor)))),3)));
end


rule "MARGEN % BENEFICIO EN DOCUMENTO"
agenda-group "rules" when
	
	FactHierarchy(idtoDoc:IDTO,CLASSSUP=="FACTURA_A_CLIENTE")	
	Lock(IDTO==idtoDoc,idoDoc:IDO,STATE==Constants.INDIVIDUAL_STATE_LOCK)

	coste:Double(doubleValue!=0.0)    from accumulate((and	ObjValue(IDO==idoDoc,PROPNAME=="línea",idoLinea:IDOVALUE!=null)
															DatValue(IDO==idoLinea,PROPNAME=="cantidad",q:DOUBLEVALUE!=null)
															DatValue(IDO==idoLinea,PROPNAME=="coste_unitario",c:DOUBLEVALUE!=null)),
									sum(c*q))
	DatValue(IDO==idoDoc,PROPNAME=="base",base:DOUBLEVALUE!=null&&!=0)
	
then
	double margen=Auxiliar.redondea(100*(1-coste/base),3);
	dma.printRule("==========MARGEN % BENEFICIO EN DOCUMENTO "+margen);
	dma.setValue(idoDoc,idtoDoc,"margen_beneficio",new DoubleValue(Auxiliar.redondea(100*(1-coste/base),3)));
end

